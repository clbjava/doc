RSA加密与解密
RSA算法的密钥由公钥和私钥组成，公钥用于加密，私钥用于解密。顾名思义，公钥就是可以进行公开的密钥，一般可以公开给你的合作伙伴；私钥就是私有的，也就是只有你知道的，你的合作伙伴通过你提供的公钥进行加密的内容只有你能进行解密，这样也就只有你知道他发的是什么内容。用于加密的公钥和私钥是配对的。这样的一对密钥在Java中由java.security.KeyPairGenerator来产生。以下是一个生成密钥对的示例，该示例中还将生成的密钥对分别保存到了文件中。

	private static final String ALGORITHM = "RSA";
	private static final String PRIVATE_KEY_PATH = "D:\\rsa_private.isa";
	private static final String PUBLIC_KEY_PATH = "D:\\rsa_public.isa";
	
	/**
	 * 生成公钥和私钥并存储到文件中
	 * @throws Exception
	 */
	@Test
	public void geneKeyPair() throws Exception {
		KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(ALGORITHM);
		keyPairGenerator.initialize(1024);
		KeyPair keyPair = keyPairGenerator.generateKeyPair();
		PrivateKey privateKey = keyPair.getPrivate();//私钥
		PublicKey publicKey = keyPair.getPublic();//公钥
		byte[] privateKeyBytes = privateKey.getEncoded();//私钥对应的字节数组
		byte[] publicKeyBytes = publicKey.getEncoded();//公钥对应的字节数组
		Files.write(Paths.get(PRIVATE_KEY_PATH), privateKeyBytes);
		Files.write(Paths.get(PUBLIC_KEY_PATH), publicKeyBytes);
	}
加密
加密的过程跟使用AES算法进行加密的过程类似，唯一需要注意的是使用存储起来的公钥时需要使用X509EncodedKeySpec进行封装，然后通过KeyFactory.generatePublic(KeySpec)进行生成。

	@Test
	public void testEncrypt() throws Exception {
		this.encrypt("Hello RSA");
	}
	
	/**
	 * 公钥加密
	 * @param value
	 * @return
	 * @throws Exception
	 */
	private byte[] encrypt(String value) throws Exception {
		Cipher cipher = Cipher.getInstance(ALGORITHM);
		//读取公钥对应的字节数组
		byte[] publicKeyCode = Files.readAllBytes(Paths.get(PUBLIC_KEY_PATH));
		//构造公钥，存储起来的公钥需要使用X509EncodedKeySpec进行读取
		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicKeyCode);
		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);
		//根据已有的KeySpec生成对应的公钥
		PublicKey publicKey = keyFactory.generatePublic(keySpec);
		cipher.init(Cipher.ENCRYPT_MODE, publicKey);
		byte[] result = cipher.doFinal(value.getBytes());
		System.out.println(Base64.getEncoder().encodeToString(result));
		return result;
	}
解密
解密是使用的密钥对中的私钥，其使用方法跟AES算法进行解密类似。 存储起来的私钥需要通过PKCS8EncodedKeySpec加载，然后通过KeyFactory.generatePrivate(KeySpec)生成私钥。

	/**
	 * 私钥解密
	 * @throws Exception
	 */
	@Test
	public void testDecrypt() throws Exception {
		Cipher cipher = Cipher.getInstance(ALGORITHM);
		byte[] privateKeyCode = Files.readAllBytes(Paths.get(PRIVATE_KEY_PATH));
		//私钥需要通过PKCS8EncodedKeySpec来读取
		PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyCode);
		KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);
		//生成私钥
		PrivateKey privateKey = keyFactory.generatePrivate(keySpec);
		cipher.init(Cipher.DECRYPT_MODE, privateKey);
		String content = "Java Program";
		byte[] input = this.encrypt("Java Program");
		byte[] result = cipher.doFinal(input);
		Assert.assertTrue(content.equals(new String(result)));
	}
